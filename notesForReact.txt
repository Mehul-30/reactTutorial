In react jsx file is converted into react by babel then the react is converted into html
    JSX is the combination od html and js

    const jsxfile = <h1 id="jsxfile">This is a jsx file</h1>;

        which is converted into react
    
    condt reactElement = React.createElement(
        'h1',
        { id: 'reactElement' },
        'This is a react element'
    );

        Then converted into html 


    const fetchRoot = ReactDOM.createRoot(document.getElementById('root')); 
    fetchRoot.render(jsxfile);

This is the workflow of React and all the converstion are done by parcel

In the dependency there can be a tildo and caret
    tildo means for the update of the major version of the dependency
    caret can do only the minor upgrade

React element
    const itle = <h1 id="root"> "On the top" </h2>
    To insert React element into Components use {} curly brackets eg.{title} into the Functional component code
    

React Component - Types
    Class based Component
    functional Component

The variable name should be captial when nameing a React component for react element the namings doesn't matter

To call a functional component it can be <Title /> or {Title ()} both are valid

Component composition

    One functional component into a funtional component
        const Title = ()=>{
            return <h1> "On the top" </h2>
        }
        const Header = ()=>{
            < Title />
            return <h1> "Hello here" </h1>
        }

To inject javascript into jsx use curly brackets {}
    example {200+300}

Function is like an object at the end and props is passin argument to the object
    const Resturant = (props)=>{
        //The contents
        <h1>{props.resName}</h1>
        <h1>{props.cusinie}</h1>
    }

    <Resturant resName ="Meghana Food" cusinie="Indian foods, fast food" />
    This resName is pros which is passed as an argument

Config driven UI 
    The front-end will render based the data from the back-end
    example carols showed in all the websites

There are two types of export / import
    -Default export/import
        At the end of the code mention export default <name>
        In the begining import <variable name> from <its path>

    -name export/import
        export const <component name>
        import {variableName} from <its path>

React hooks
  They are normal utility JS functions - developed by facebook 

  useState from react

    useState has one array arugument is to used when need to reRender particular component
        Whenever a state vaiables updates it rerender the react components associated with it
        state variable are only create inside the components 

    useEffect from react
        It passes a callback function as an argument and a array
        When the render cycle completes it will call the function in the useEffect
        If there is no dependency array the useEffect function is called all the time when the page rendered
            -If there is a dependency array the useEffect is called only in the intital time of rendering
            -If there is any element in the dependency array the useEffect is rendered when the variable in the dependency array is updated

    useRouteError from react-router-dom
        This shows the error while routing that acan be use it to display
        example:- const error = useRouteError()

    useParams from react-router-dom
        It is a hook used to get the params from the frontend
        const params = useParams();


 How react works??
  React uses reconcilialtion algorithm (React fiber )

  There are two types to render an webpage
    1. ->load->api call->render
    2. ->load->render->api call->rerender

    React uses the second option and it is the better apporoach 

React-router-dom
For routing to different pages react uses react-router-document
    -It has createBrowserRouter is take a arraylist as an argument and ther we have to provide the path and element->which is the component 


    example:-
        import {createBrowserRouter, RouterProvider} from "react-router-dom"

        const appLayout()
        const root = ReactDOM.createRoot("root")

        root.render(<appLayout/>)
        this is the normal way

        To have browser routing 
            root.rennder(<RouterProvider router={appLayout} />)
        
        -Outlet
            It is use to route the children present in the component

There are two types of routing
    -Client side routing -> example using a Link tag it load all the components at the begining and reRender the components. 
    -Server side routing -> example using an anchor tag <a> reload the whole page and get the html or other docume from the backEnd. It refresh the browser
  